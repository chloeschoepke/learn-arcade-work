1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]

temp = my_list[7]
my_list[7] = my_list[6]
my_list[6] = temp

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]

temp = my_list[3]
my_list[3] = my_list[0]
my_list[0] = temp

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

70 goes to temporary, then the empty space is attempted to move to the one space,
then 70 from temporary is moved to the first space again.
To fix, the 32 in the first space should be moved to temporary rather than the 70 in the zero space

4. Show how the following numbers can be sorted using the selection sort.
Show the numbers after each iteration of the outer loop, similar to what is shown in the book.
I am NOT looking for a copy of the code to do the sort.
If you include any code for problems 4-7 you are doing it wrong.

97   74    8   98   47   62   12   11    0    60
0    74    8   98   47   62   12   11    97   60
0    8    74   98   47   62   12   11    97   60
0    8    11   98   47   62   12   74    97   60
0    8    11   12   47   62   98   74    97   60
0    8    11   12   47   60   98   74    97   62
0    8    11   12   47   60   62   74    97   98

5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25
0    92   18   47   40   58   74   36   29   25
0    18   92   47   40   58   74   36   29   25
0    18   25   47   40   58   74   36   29   92
0    18   25   29   40   58   74   36   47   92
0    18   25   29   36   58   74   40   47   92
0    18   25   29   36   40   74   58   47   92
0    18   25   29   36   40   47   58   74   92

6. Show how the following numbers can be sorted using the INSERTION sort.
(Note: If you think the 0 gets immediately sorted into position, you are doing it wrong.
Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25
18   74   92   47   40   58    0   36   29   25
18   47   74   92   40   58    0   36   29   25
18   40   47   74   92   58    0   36   29   25
18   40   47   58   74   92    0   36   29   25
0    18   40   47   58   74   92   36   29   25
0    18   36   40   47   58   74   92   29   25
0    18   29   36   40   47   58   74   92   25
0    18   25   29   36   40   47   58   74   92

7. Show how the following numbers can be sorted using the insertion sort:

37   11   14   50   24    7   17   88   99    9
11   37   14   50   24    7   17   88   99    9
11   14   37   50   24    7   17   88   99    9
11   14   24   37   50    7   17   88   99    9
7    11   14   24   37   50   17   88   99    9
7    11   14   17   24   37   50   88   99    9
7    9    11   14   17   24   37   50   88   99

8. Explain what `min_pos` does in the selection sort.
min_pos is the storing area for the information on what position has the smallest number as
the loop goes through the array. If a smaller number is found that position is set to the min_pos

9. Explain what `cur_pos` does in the selection sort.
cur_pos is the current position as the loop scans through the array,

10. Explain what `scan_pos` does in the selection sort.
scan_pos scans from the end of the list to determine if it is the smallest, if the number in the
scan position is less than the min_pos it gets set to the min_pos.

11. Explain what `key_pos` and `key_value` are in the insertion sort.
key_pos marks the boundary between the sorted and unsorted portions of the list starting at the
second element where that element is used to insert into the list.
key_value is the value in the array held in key_pos that gets inserted once everything is moved
out of the way this is the value that is reinserted into the correct location

12. Explain `scan_pos` in the insertion sort.
In the insertion sort scan_pos goes down to the left and is where the algorithm scans through at one less
than the key_pos the scam_pos determines how to shift all the elements following insertion


13. Look at the example sort program at the very end of this chapter:
import random


def selection_sort(my_list):
    """ Sort a list using the selection sort """
    selection_outside_loop = 0
    selection_inside_loop = 0
    # Loop through the entire array
    for cur_pos in range(len(my_list)):
        # Find the position that has the smallest number
        # Start with the current position
        min_pos = cur_pos
        selection_outside_loop += 1

        # Scan left to right (end of the list)
        for scan_pos in range(cur_pos + 1, len(my_list)):
            selection_inside_loop += 1
            # Is this position smallest?
            if my_list[scan_pos] < my_list[min_pos]:
                # It is, mark this position as the smallest
                min_pos = scan_pos

        # Swap the two values
        temp = my_list[min_pos]
        my_list[min_pos] = my_list[cur_pos]
        my_list[cur_pos] = temp
    print("Selection Outside Loop")
    print(selection_outside_loop)

    print("Selection Inside Loop")
    print(selection_inside_loop)


def insertion_sort(my_list):
    """ Sort a list using the insertion sort """
    insertion_outside_loop = 0
    insertion_inside_loop = 0
    # Start at the second element (pos 1).
    # Use this element to insert into the
    # list.
    for key_pos in range(1, len(my_list)):
        insertion_outside_loop += 1

        # Get the value of the element to insert
        key_value = my_list[key_pos]

        # Scan from right to the left (start of list)
        scan_pos = key_pos - 1

        # Loop each element, moving them up until
        # we reach the position the
        while (scan_pos >= 0) and (my_list[scan_pos] > key_value):
            insertion_inside_loop += 1
            my_list[scan_pos + 1] = my_list[scan_pos]
            scan_pos = scan_pos - 1

        # Everything's been moved out of the way, insert
        # the key into the correct location
        my_list[scan_pos + 1] = key_value

    print("Insertion Outside Loop")
    print(insertion_outside_loop)
    print("Insertion Inside Loop")
    print(insertion_inside_loop)
# This will point out a list
# For more information on the print formatting {:3}
# see the chapter on print formatting.


def print_list(my_list):
    for item in my_list:
        print(f"{item:3}", end="")
    print()


def main():
    # Create two lists of the same random numbers
    list_for_selection_sort = []
    list_for_insertion_sort = []
    list_size = 100
    for i in range(list_size):
        new_number = random.randrange(100)
        list_for_selection_sort.append(new_number)
        list_for_insertion_sort.append(new_number)

    # Use the selection sort and print the result

    selection_sort(list_for_selection_sort)
    insertion_sort(list_for_insertion_sort)


main()

RESULTS:
Selection Outside Loop
100
Selection Inside Loop
4950
Insertion Outside Loop
99
Insertion Inside Loop
2301
